import re
from html.parser import HTMLParser
from typing import Dict, List, Optional, Tuple, Union


class Form10KParser(HTMLParser):
    """Parses a Form 10-K document"""

    def __call__(self, unparsed_document: str) -> List[Dict[str, Union[str, int]]]:
        """
        Parses the HTML tags and content in a Form 10-K document
        :param unparsed_document: unparsed document, in HTML form
        :return: parsed contract
        """

        self.pages = []
        self.current_page = ''

        # Reset the parser's state
        self.reset()

        # Parse the contract from HTML to text
        self.feed(unparsed_document)

        parsed_document = [{
            'page_num': self.get_page_number(page),
            'page': self.strip_unprinted_whitespace(page),
        } for page in self.pages]

        return parsed_document

    def reset(self) -> None:
        """Resets the parser's state. (All data is cleared.)"""

        self.pages = []
        self.current_page = ''

        # Track whether parsed HTML tags are inside or outside of the body
        self.body = 0

        # Call the base class' reset method
        super().reset()

    def handle_starttag(self, tag: str, attrs: List[Tuple[str]]) -> None:
        """
        Tokenise HTML start tags inside the body
        :param tag: HTML start tag
        :param attrs: HTML start tag attributes
        """

        # Identify pagebreaks
        if self.body and (tag == 'hr'):
            self.pages.append(self.current_page)
            self.current_page = ''

        else:
            self.current_page += ' '

        # If the tag is the body tag, update self.body to indicate that further tags are inside the body
        if tag == 'body':
            self.body = 1

    def handle_data(self, data: str) -> None:
        """
        Tokenises the text between HTML tags inside the body
        :param data: text between HTML tags
        """

        if self.body:
            self.current_page += data

    def handle_endtag(self, tag: str) -> None:
        """
        Tokenise HTML end tags inside the body
        :param tag: HTML end tag
        """

        # If the tag is the end body tag, update self.body to indicate that further tags are outside the body
        if tag == 'body':
            self.body = 0

        else:
            self.current_page += ' '

    @staticmethod
    def strip_unprinted_whitespace(page: str) -> str:
        """
        Strip `page` of leading and trailing spaces, multiple spaces, tabs and newlines (which in HTML are not
        printed)
        :param page: single page from a parsed Form 10-K document
        :return: parsed Form 10-K page, without non-printable whitespace characters
        """

        # Strip out multiple spaces, tabs and newlines
        page = page.replace('\n', ' ')
        page = re.sub(r'\s\s+', ' ', page)

        # Strip out leading and trailing spaces
        page = page.strip()

        return page

    @staticmethod
    def get_page_number(page: str) -> Optional[int]:
        """
        Extracts the page number from `page`
        :param page: single page from a parsed Form 10-K document
        :return: page number if it can be identified
        """

        try:
            # Very crude - appears to work for the Form 10-Ks generated by Workiva, which the big companies use.
            # However, I suggest that you investigate this in more detail and refine this function as necessary
            last_token = page.split()[-1]

        except IndexError:
            pass

        else:
            if last_token.isdigit():
                return int(last_token)

        return None
